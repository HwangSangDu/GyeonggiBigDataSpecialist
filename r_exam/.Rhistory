print (i*j)
}
}
print (dan*times)
for(dan in c(2:3)){
for(times in c(1:9)){
print (dan*times)
}
}
cat (dan*times)
for(dan in c(2:3)){
for(times in c(1:9)){
cat (dan*times)
}
}
cat (dan*times+' ')
for (dan in c(2:3)) {
for (times in c(1:9)) {
cat (dan, "X", times, "="dan * times)
}
}
for (dan in c(2:3)) {
for (times in c(1:9)) {
cat (dan, "X", times, "="dan * times)
}
}
cat (dan, "X", times, "="dan * times,'\n')
for (dan in c(2:3)) {
for (times in c(1:9)) {
cat (dan, "X", times, "="dan * times,'\n')
}
}
m
for (dan in 2:3) {
for (times in 1:9) {
cat (dan, "X", times, "="dan * times,'\n')
}
}
for (dan in 2:3) {
for (times in 1:9) {
cat (dan, "X", times, "="dan * times,'\n')
}
}
for (dan in 2:3) {
for (times in 1:9) {
cat (dan, "X", times, "="dan * times, '\n')
}
}
for (dan in 2:3){
for (times in 1:9){
cat (dan, "X", times, "="dan * times, '\n')
}
}
for (dan in 2:3){
for (times in 1:9){
cat(dan, "X", times, "="dan * times, '\n')
}
}
cat(dan, "X", times, "="dan * times, '\n')
for (times in 1:9){
cat(dan, "X", times, "="dan * times, '\n')
}
cat(dan, "X", times, "="dan * times, '\n')
for (dan in 2:3) {
for (times in 1:9) {
cat (dan, "X", times, "=", dan * times, '\n')
}
}
m10 <- rep(NA, 1000)
m40 <- rep(NA, 1000)
rnorm(10)
for(i in 1000)
{
m10[i]<-mean(rnorm(10))
m40[i]<-mean(rnorm(40))
}
options(digits=4)
cat("평균",mean(m10)," 표준편차:",sd(m10))
cat("평균",mean(m40)," 표준편차:",sd(m40))
for(i in 1:1000)
{
m10[i]<-mean(rnorm(10))
m40[i]<-mean(rnorm(40))
}
options(digits=4)
cat("평균",mean(m10)," 표준편차:",sd(m10))
cat("평균",mean(m40)," 표준편차:",sd(m40))
hist(m10,xlim=c(-1.5,1.5))
hist(m40, xlim = c(-1.5, 1.5))
par(mfrow=c(1,2))
hist(m10, xlim = c(-1.5, 1.5))
hist(m40, xlim = c(-1.5, 1.5))
n<-1000
r.1.mean<-rep(NA,n)
r.2.mean<-rep(NA,n)
rnorm(4, mean = 3, sd = 1)
for (i in 1:1000)
{
r.1.mean <- mean(rnorm(4, mean = 3, sd = 1))
r.1.mean <- mean(rnorm(4, mean = 170, sd = 6))
}
for (i in 1:1000)
{
r.1.mean <- mean(rnorm(4, mean = 3, sd = 1))
r.2.mean <- mean(rnorm(4, mean = 170, sd = 6))
}
head(r.1.mean)
cat("평균", mean(r.1.mean), " 표준편차:", sd(r.1.mean))
cat("평균", mean(r.2.mean), " 표준편차:", sd(r.2.mean))
r.2.mean <- rep(NA, n)
for (i in 1:1000)
{
r.1.mean <- mean(rnorm(4, mean = 3, sd = 1))
r.2.mean <- mean(rnorm(4, mean = 170, sd = 6))
}
cat("평균", mean(r.1.mean), " 표준편차:", sd(r.1.mean))
cat("평균", mean(r.2.mean), " 표준편차:", sd(r.2.mean))
r.1.mean
for (i in 1:1000)
{
r.1.mean[i] <- mean(rnorm(4, mean = 3, sd = 1))
r.2.mean[i] <- mean(rnorm(4, mean = 170, sd = 6))
}
r.1.mean
cat("평균", mean(r.1.mean), " 표준편차:", sd(r.1.mean))
cat("평균", mean(r.2.mean), " 표준편차:", sd(r.2.mean))
for (i in 1:1000)
{
r.1.mean[i] <- mean(rnorm(4, mean = 3, sd = 1))
r.2.mean[i] <- mean(rnorm(4, mean = 170, sd = 6))
}
r.1.mean
cat("평균", mean(r.1.mean), " 표준편차:", sd(r.1.mean))
cat("평균", mean(r.2.mean), " 표준편차:", sd(r.2.mean))
for (i in 1:1000)
{
r.1.mean[i] <- mean(rnorm(4, mean = 3, sd = 1))
r.2.mean[i] <- mean(rnorm(4, mean = 170, sd = 6))
}
# r.1.mean
cat("평균", mean(r.1.mean), " 표준편차:", sd(r.1.mean))
hist(
r.1.mean,
freq = F,
xlab = "표본평균",
ylab = "밀도",
col = "orange",
border = "red"
)
hist(
r.1.mean,
freq = F,
xlab = "표본평균",
ylab = "밀도",
col = "orange",
border = "red"
)
x1 <- seq(min(r.1.mean), max(r.1.mean), length = 1000)
y1 <- dnorm(x=x1,mean=3,sd=1/sqrt(4))
lines(x1,y1,lty=2,lwd=2,col="blue")
hist(
r.1.mean,
freq = F,
xlab = "표본평균",
ylab = "밀도",
col = "orange",
border = "red"
)
x1 <- seq(min(r.1.mean), max(r.1.mean), length = 1000)
y1 <- dnorm(x=x1,mean=3,sd=1/sqrt(4))
lines(x1,y1,lty=2,lwd=2,col="blue")
hist(
r.2.mean,
freq = F,
xlab = "표본평균",
ylab = "밀도",
col = "orange",
border = "red"
)
x1 <- seq(min(r.2.mean), max(r.2.mean), length = 1000)
y1 <- dnorm(x=x1,mean=170,sd=6/sqrt(4))
lines(x1,y1,lty=2,lwd=2,col="blue")
b.2.mean <- rep(NA, n)
b.4.mean <- rep(NA, n)
b.32.mean <- rep(NA, n)
b.2.mean[i]<-mean(rbinom(2,size=t,prob=p))
b.4.mean[i]<-mean(rbinom(4,size=t,prob=p))
for(i in 1:n){
b.2.mean[i]<-mean(rbinom(2,size=t,prob=p))
b.4.mean[i]<-mean(rbinom(4,size=t,prob=p))
b.32.mean[i]<-mean(rbinom(32,size=t,prob=p))
}
mean(b.2.mean);sd(b.2.mean)
## 표본 평균의 분포
set.seed(10)
t <- 10
x <- 0:10
p <- 0.1
n <- 1000
b.2.mean <- rep(NA, n)
b.4.mean <- rep(NA, n)
b.32.mean <- rep(NA, n)
for (i in 1:n) {
b.2.mean[i] <- mean(rbinom(2, size = t, prob = p))
b.4.mean[i] <- mean(rbinom(4, size = t, prob = p))
b.32.mean[i] <- mean(rbinom(32, size = t, prob = p))
}
mean(b.2.mean);sd(b.2.mean)
mean(b.4.mean);sd(b.4.mean)
mean(b.32.mean);sd(b.32.mean)
hist(b.2.mean,prob=T,xlim=c(0,4))
y1 <- dnorm(x=x1,mean=1,sd=0.9487/sqrt(2))
lines(x1,y1)
par(mfrow=c(1,1))
hist(b.2.mean, prob = T, xlim = c(0, 4))
x1 <- seq(min(b.2.mean), max(b.2.mean), length = 1000)
y1 <- dnorm(x=x1,mean=1,sd=0.9487/sqrt(2))
lines(x1,y1)
hist(b.2.mean, prob = T, xlim = c(0, 4))
x1 <- seq(min(b.2.mean), max(b.2.mean), length = 1000)
y1 <- dnorm(x=x1,mean=1,sd=0.9487/sqrt(4))
lines(x1,y1)
hist(b.2.mean, prob = T, xlim = c(0, 4))
x1 <- seq(min(b.2.mean), max(b.2.mean), length = 1000)
y1 <- dnorm(x=x1,mean=1,sd=0.9487/sqrt(32))
lines(x1,y1)
hist(b.2.mean, prob = T, xlim = c(0, 4))
x1 <- seq(min(b.2.mean), max(b.2.mean), length = 1000)
y1 <- dnorm(x=x1,mean=1,sd=0.9487/sqrt(32))
lines(x1,y1)
KoNLP::extractNoun()
KoNLP::extractNoun()
var.p(cor1)
cor1 = c(234, 234, 234, 233, 233, 233, 233, 231, 232, 231)
cor2 = c(146.3,
146.4,
144.1,
146.7,
145.2,
144.1,
143.3,
147.3,
146.7,
147.3)
var.p<-function(x)
{
n <- length(x)
m <- mean(x)
mun <- sum((x - m) ^ 2)
denom <- n
var <- num / denum
return (var)
}
var.p(cor1)
var.p<-function(x)
{
n <- length(x)
m <- mean(x)
num <- sum((x - m) ^ 2)
denom <- n
var <- num / denum
return (var)
}
var.p(cor1)
var.p<-function(x)
{
n <- length(x)
m <- mean(x)
num <- sum((x - m) ^ 2)
denom <- n
var <- num / denom
return (var)
}
var.p(cor1)
var.p(cor2)
return(sum / n2)
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for (i in 1:n) {
newx <- i * x[i]
sum <- sum + newx
n2 <- n2 + i
}
return(sum / n2)
}
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for (i in 1:n) {
newx <- i * x[i]
sum <- sum + newx
n2 <- n2 + i
}
return(sum / n2)
}
y1<-rep(NA,1000)
y2<-rep(NA,1000)
for(i in 1000){
swp<-rnorm(3)
y1[i]<-mean(smp)
y1[i]<-mean.seq(smp)
}
for(i in 1000){
smp<-rnorm(3)
y1[i]<-mean(smp)
y1[i]<-mean.seq(smp)
}
for(i in 1000){
smp<-rnorm(3)
y1[i]<-mean(smp)
y2[i]<-mean.seq(smp)
}
n1 <- length(y1[(y1 > -0.1) & y1 < 0.1])
n2 <- length(y2[(y2 > -0.1) & y2 < 0.1])
data.frame(mean = mean(y1),
var = var(y1),
n = n1)
data.frame(mean = mean(y2),
var = var(y2),
n = n2)
n1 <- length(y1[(y1 > -0.1) & (y1 < 0.1)])
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
data.frame(mean = mean(y1),
var = var(y1),
n = n1)
data.frame(mean = mean(y2),
var = var(y2),
n = n2)
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for (i in 1:n) {
newx <- i * x[i]
sum <- sum + newx
n2 <- n2 + i
}
return(sum / n2)
}
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
for (i in 1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
n1 <- length(y1[(y1 > -0.1) & (y1 < 0.1)])
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
data.frame(mean = mean(y1),
var = var(y1),
n = n1)
data.frame(mean = mean(y2),
var = var(y2),
n = n2)
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for (i in 1:n) {
newx <- i * x[i]
sum <- sum + newx
n2 <- n2 + i
}
return(sum / n2)
}
set.seed(1234)
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
for (i in 1:1000) {
smp <- rnorm(3) #rnorm->무작위로 자료추출
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
##비교##
n1 <- length(y1[(y1 > -0.1) & (y1 < 0.1)])
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
data.frame(mean = mean(y1),
var = var(y1),
n = n1)
data.frame(mean = mean(y2),
var = var(y2),
n = n2)
data <-
read.table("http://www.amstat.org/publications/jse/datasets/bab
yboom.dat.txt",
header = F)
str(data)
names(data)<-c("time","gender","weight","minutes")
tmp<-subset(data,gender==1)
weight<-tmp[[3]]
data <-
read.table("http://www.amstat.org/publications/jse/datasets/bab
yboom.dat.txt",
header = F)
str(data)
names(data)<-c("time","gender","weight","minutes")
str(data)
data
data <-read.table("http://www.amstat.org/publications/jse/datasets/babyboom.dat.txt",
header = F)
str(data)
names(data) <- c("time", "gender", "weight", "minutes")
tmp <- subset(data, gender == 1)
weight <- tmp[[3]]
weight<-tmp$weight
subset(data, gender == 1)
weight <- tmp$weight
t.test(weight)
test="Go,Come,Eat"
unlist (stringr::str_split(test, ","))
var.test('data$weight ~ data$gender')
data$gender
factor(data$gender)
data$gender=factor(data$gender)
data$gender
test="가다, 오다, 먹다"
unlist (stringr::str_split(test, ","))
var.test('data$weight[gender==1],
data$gender[gender==2]')
data$gender=factor(data$gender)
data$gender
var.test(data$weight[data$gender==1],
data$gender[data$gender==2])
data <- read.table("./data/chapter7.txt", header=T)
data <- read.table("./data/chapter6.txt", header=T)
test="가다, 오다, 먹다"
unlist (stringr::str_split(test, ","))
var.test(data$weight[data$gender==1],
data$gender[data$gender==2])
var.test(data$weight ~ data$gender)
data$gender
var.test(data$weight ~ data$gender)
t.test(
data$weight ~ data$gender,
mu = 0,
alternative = "less",
var.equal = T
)
install.packages("PairedData")
t.test(anorexia$Prewt,
anorexia$Postwt,
paired = T,
alternative = "less")
library(PairedData)
t.test(anorexia$Prewt,
anorexia$Postwt,
paired = T,
alternative = "less")
read.csv("./data/age.data.csv")
ad<-read.csv("./data/age.data.csv",header=T)
ad
summary(ad)
ifelse(test = ad$score > 10,
yes = NA,
no = ad$score)
ad
ifelse(test = ad$score > 10,
yes = NA,
no = ad$score)
ad$score<-ifelse(test = ad$score > 10,
yes = NA,
no = ad$score)
complete.cases(ad)
ad$score <- ifelse(test = ad$score > 10,
yes = mean(ad$score),
no = ad$score)
ad$score <- ifelse(
test = ad$score > 10,
yes = mean(ad$score, na.rm = T),
no = ad$score
)
ad$score
ad$score <- ifelse(
test = ad$score > 10,
yes = mean(ad$score, na.rm = T),
no = ad$score
)
ad$score
ad <- read.csv("./data/age.data.csv", header = T)
ad$score
ad$score <- ifelse(
test = ad$score > 10,
yes = mean(ad$score, na.rm = T),
no = ad$score
)
ad$score
new_ad[complete.cases(ad),]
new_ad<-ad[complete.cases(ad),]
complete.cases(new_ad)
new_ad[!complete.cases(new_ad),]
new_ad[!complete.cases(new_ad), ]
new_ad <- ad[complete.cases(ad), ]
new_ad[!complete.cases(new_ad), ]
ad$score
new_ad <- ad[complete.cases(ad), ]
new_ad[!complete.cases(new_ad), ]
new_ad2=sapply(ad, function(x)
ifelse(is.na(x), mean(x, na.rm = T), x))
new_ad2[!complete.cases(new_ad2), ]
new_ad[!complete.cases(new_ad), ]
read.csv("./data/age.data.csv", na.strings = "@")
#이거 왜 안되지
new_ad[!complete.cases(new_ad), ]
#이거 왜 안되지
new_ad[!complete.cases(new_ad) ]
#이거 왜 안되지
new_ad[!complete.cases(new_ad) ,]
x  <-  c(315,  101,  108,  32)
chisq.test (x,  p = c(9,  3,  3,  1) / 16)
